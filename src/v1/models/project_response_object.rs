/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectResponseObject {
    /// The ID of the project, generated when the task was created
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The title of the project
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The ID of the board this project is associated with
    #[serde(rename = "board_id", skip_serializing_if = "Option::is_none")]
    pub board_id: Option<f64>,
    /// The ID of the phase this project is associated with
    #[serde(rename = "phase_id", skip_serializing_if = "Option::is_none")]
    pub phase_id: Option<f64>,
    /// The description of the project
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The status of the project
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The ID of a project owner
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<f64>,
    /// The start date of the project. Format: YYYY-MM-DD.
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The end date of the project. Format: YYYY-MM-DD.
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// An array of IDs of the deals this project is associated with
    #[serde(rename = "deal_ids", skip_serializing_if = "Option::is_none")]
    pub deal_ids: Option<Vec<i32>>,
    /// The ID of the organization this project is associated with
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<f64>,
    /// The ID of the person this project is associated with
    #[serde(rename = "person_id", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<f64>,
    /// An array of IDs of the labels this project has
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<i32>>,
    /// The creation date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The update date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The status changed date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.
    #[serde(rename = "status_change_time", skip_serializing_if = "Option::is_none")]
    pub status_change_time: Option<String>,
    /// The archived date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. If not archived then 'null'.
    #[serde(rename = "archive_time", skip_serializing_if = "Option::is_none")]
    pub archive_time: Option<String>,
}

impl ProjectResponseObject {
    pub fn new() -> ProjectResponseObject {
        ProjectResponseObject {
            id: None,
            title: None,
            board_id: None,
            phase_id: None,
            description: None,
            status: None,
            owner_id: None,
            start_date: None,
            end_date: None,
            deal_ids: None,
            org_id: None,
            person_id: None,
            labels: None,
            add_time: None,
            update_time: None,
            status_change_time: None,
            archive_time: None,
        }
    }
}

