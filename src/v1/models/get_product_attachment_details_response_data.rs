/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::v1::models;
use serde::{Deserialize, Serialize};

/// GetProductAttachmentDetailsResponseData : The updated product object attached to the deal
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetProductAttachmentDetailsResponseData {
    /// The ID of the product
    #[serde(rename = "product_id", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The price at which this product will be added to the deal
    #[serde(rename = "item_price", skip_serializing_if = "Option::is_none")]
    pub item_price: Option<f64>,
    /// Quantity â€“ e.g. how many items of this product will be added to the deal
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    /// The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
    #[serde(rename = "discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    /// The type of the discount's value
    #[serde(rename = "discount_type", skip_serializing_if = "Option::is_none")]
    pub discount_type: Option<DiscountType>,
    /// The ID of the product variation to use. When omitted, no variation will be used
    #[serde(rename = "product_variation_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_variation_id: Option<Option<i32>>,
    /// A textual comment associated with this product-deal attachment
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The product tax
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    /// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
    #[serde(rename = "tax_method", skip_serializing_if = "Option::is_none")]
    pub tax_method: Option<TaxMethod>,
    /// Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default
    #[serde(rename = "enabled_flag", skip_serializing_if = "Option::is_none")]
    pub enabled_flag: Option<bool>,
    /// Only available in Advanced and above plans  How often a customer is billed for access to a service or product  To set `billing_frequency` different than `one-time`, the deal must not have installments associated  A deal can have up to 20 products attached with `billing_frequency` different than `one-time` 
    #[serde(rename = "billing_frequency", skip_serializing_if = "Option::is_none")]
    pub billing_frequency: Option<BillingFrequency>,
    /// Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  When `billing_frequency` is set to `weekly`, this field cannot be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 208 
    #[serde(rename = "billing_frequency_cycles", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_frequency_cycles: Option<Option<i32>>,
    /// Only available in Advanced and above plans  The billing start date. Must be between 10 years in the past and 10 years in the future 
    #[serde(rename = "billing_start_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_start_date: Option<Option<String>>,
    /// The ID of the deal-product (the ID of the product attached to the deal)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The ID of the company
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<i32>,
    /// The ID of the deal
    #[serde(rename = "deal_id", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<i32>,
    /// The sum of all the products attached to the deal
    #[serde(rename = "sum", skip_serializing_if = "Option::is_none")]
    pub sum: Option<f64>,
    /// The currency associated with the deal product
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// The date and time when the product was added to the deal
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The date and time when the deal product was last edited
    #[serde(rename = "last_edit", skip_serializing_if = "Option::is_none")]
    pub last_edit: Option<String>,
    /// Whether the product is active or not
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    /// The product name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl GetProductAttachmentDetailsResponseData {
    /// The updated product object attached to the deal
    pub fn new() -> GetProductAttachmentDetailsResponseData {
        GetProductAttachmentDetailsResponseData {
            product_id: None,
            item_price: None,
            quantity: None,
            discount: None,
            discount_type: None,
            product_variation_id: None,
            comments: None,
            tax: None,
            tax_method: None,
            enabled_flag: None,
            billing_frequency: None,
            billing_frequency_cycles: None,
            billing_start_date: None,
            id: None,
            company_id: None,
            deal_id: None,
            sum: None,
            currency: None,
            add_time: None,
            last_edit: None,
            active_flag: None,
            name: None,
        }
    }
}
/// The type of the discount's value
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiscountType {
    #[serde(rename = "percentage")]
    Percentage,
    #[serde(rename = "amount")]
    Amount,
}

impl Default for DiscountType {
    fn default() -> DiscountType {
        Self::Percentage
    }
}
/// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxMethod {
    #[serde(rename = "exclusive")]
    Exclusive,
    #[serde(rename = "inclusive")]
    Inclusive,
    #[serde(rename = "none")]
    None,
}

impl Default for TaxMethod {
    fn default() -> TaxMethod {
        Self::Exclusive
    }
}
/// Only available in Advanced and above plans  How often a customer is billed for access to a service or product  To set `billing_frequency` different than `one-time`, the deal must not have installments associated  A deal can have up to 20 products attached with `billing_frequency` different than `one-time` 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingFrequency {
    #[serde(rename = "one-time")]
    OneTime,
    #[serde(rename = "annually")]
    Annually,
    #[serde(rename = "semi-annually")]
    SemiAnnually,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "weekly")]
    Weekly,
}

impl Default for BillingFrequency {
    fn default() -> BillingFrequency {
        Self::OneTime
    }
}

