/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddDealRequest {
    /// The title of the deal
    #[serde(rename = "title")]
    pub title: String,
    /// The value of the deal. If omitted, value will be set to 0.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// The array of the labels IDs.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<Vec<i32>>,
    /// The currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// The ID of the user which will be the owner of the created deal. If not provided, the user making the request will be used.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `org_id` is specified.
    #[serde(rename = "person_id", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<i32>,
    /// The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    /// The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.
    #[serde(rename = "pipeline_id", skip_serializing_if = "Option::is_none")]
    pub pipeline_id: Option<i32>,
    /// The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`. If omitted, the deal will be placed in the first stage of the default pipeline.
    #[serde(rename = "stage_id", skip_serializing_if = "Option::is_none")]
    pub stage_id: Option<i32>,
    /// Whether the deal is archived or not. If omitted, is_archived will be set to false.
    #[serde(rename = "is_archived", skip_serializing_if = "Option::is_none")]
    pub is_archived: Option<bool>,
    /// The optional date and time of archiving the deal in UTC. Format: YYYY-MM-DD HH:MM:SS. If omitted and `is_archived` is true, it will be set to the current date and time.
    #[serde(rename = "archive_time", skip_serializing_if = "Option::is_none")]
    pub archive_time: Option<String>,
    /// open = Open, won = Won, lost = Lost, deleted = Deleted. If omitted, status will be set to open.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The optional ID to further distinguish the origin of the deal - e.g. Which API integration created this deal. If omitted, `origin_id` will be set to null.
    #[serde(rename = "origin_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<Option<String>>,
    /// The ID of Marketing channel this deal was created from. Provided value must be one of the channels configured for your company. You can fetch allowed values with <a href=\"https://developers.pipedrive.com/docs/api/v1/DealFields#getDealField\" target=\"_blank\" rel=\"noopener noreferrer\">GET /v1/dealFields</a>. If omitted, channel will be set to null.
    #[serde(rename = "channel", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub channel: Option<Option<i32>>,
    /// The optional ID to further distinguish the Marketing channel. If omitted, `channel_id` will be set to null.
    #[serde(rename = "channel_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<Option<String>>,
    /// The optional creation date & time of the deal in UTC. Format: YYYY-MM-DD HH:MM:SS
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The optional date and time of changing the deal status as won in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Won. Can not be used together with `lost_time`.
    #[serde(rename = "won_time", skip_serializing_if = "Option::is_none")]
    pub won_time: Option<String>,
    /// The optional date and time of changing the deal status as lost in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Lost. Can not be used together with `won_time`.
    #[serde(rename = "lost_time", skip_serializing_if = "Option::is_none")]
    pub lost_time: Option<String>,
    /// The optional date and time of closing the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.
    #[serde(rename = "close_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub close_time: Option<Option<String>>,
    /// The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD.
    #[serde(rename = "expected_close_date", skip_serializing_if = "Option::is_none")]
    pub expected_close_date: Option<String>,
    /// The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.
    #[serde(rename = "probability", skip_serializing_if = "Option::is_none")]
    pub probability: Option<f64>,
    /// The optional message about why the deal was lost (to be used when status = lost)
    #[serde(rename = "lost_reason", skip_serializing_if = "Option::is_none")]
    pub lost_reason: Option<String>,
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<VisibleTo>,
}

impl AddDealRequest {
    pub fn new(title: String) -> AddDealRequest {
        AddDealRequest {
            title,
            value: None,
            label: None,
            currency: None,
            user_id: None,
            person_id: None,
            org_id: None,
            pipeline_id: None,
            stage_id: None,
            is_archived: None,
            archive_time: None,
            status: None,
            origin_id: None,
            channel: None,
            channel_id: None,
            add_time: None,
            won_time: None,
            lost_time: None,
            close_time: None,
            expected_close_date: None,
            probability: None,
            lost_reason: None,
            visible_to: None,
        }
    }
}
/// open = Open, won = Won, lost = Lost, deleted = Deleted. If omitted, status will be set to open.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "won")]
    Won,
    #[serde(rename = "lost")]
    Lost,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VisibleTo {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "7")]
    Variant7,
}

impl Default for VisibleTo {
    fn default() -> VisibleTo {
        Self::Variant1
    }
}

