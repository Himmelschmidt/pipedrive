/*
 * Pipedrive API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::v2::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetPersonsResponseAllOfDataInner {
    /// The ID of the person
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The name of the person
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The first name of the person
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// The last name of the person
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// The ID of the user who owns the person
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The ID of the organization linked to the person
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    /// The creation date and time of the person
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The last updated date and time of the person
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The emails of the person
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<Vec<models::GetPersonsResponseAllOfDataInnerEmailsInner>>,
    /// The phones of the person
    #[serde(rename = "phones", skip_serializing_if = "Option::is_none")]
    pub phones: Option<Vec<models::GetPersonsResponseAllOfDataInnerPhonesInner>>,
    /// Whether the person is deleted or not
    #[serde(rename = "is_deleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// The visibility of the person
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<i32>,
    /// The IDs of labels assigned to the person
    #[serde(rename = "label_ids", skip_serializing_if = "Option::is_none")]
    pub label_ids: Option<Vec<i32>>,
    /// The ID of the picture associated with the person
    #[serde(rename = "picture_id", skip_serializing_if = "Option::is_none")]
    pub picture_id: Option<i32>,
    #[serde(rename = "postal_address", skip_serializing_if = "Option::is_none")]
    pub postal_address: Option<Box<models::GetPersonsResponseAllOfDataInnerPostalAddress>>,
    /// Contact sync notes of the person, maximum 10 000 characters, included if contact sync is enabled for the company
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    /// The instant messaging accounts of the person, included if contact sync is enabled for the company
    #[serde(rename = "im", skip_serializing_if = "Option::is_none")]
    pub im: Option<Vec<models::GetPersonsResponseAllOfDataInnerImInner>>,
    /// The birthday of the person, included if contact sync is enabled for the company
    #[serde(rename = "birthday", skip_serializing_if = "Option::is_none")]
    pub birthday: Option<String>,
    /// The job title of the person, included if contact sync is enabled for the company
    #[serde(rename = "job_title", skip_serializing_if = "Option::is_none")]
    pub job_title: Option<String>,
}

impl GetPersonsResponseAllOfDataInner {
    pub fn new() -> GetPersonsResponseAllOfDataInner {
        GetPersonsResponseAllOfDataInner {
            id: None,
            name: None,
            first_name: None,
            last_name: None,
            owner_id: None,
            org_id: None,
            add_time: None,
            update_time: None,
            emails: None,
            phones: None,
            is_deleted: None,
            visible_to: None,
            label_ids: None,
            picture_id: None,
            postal_address: None,
            notes: None,
            im: None,
            birthday: None,
            job_title: None,
        }
    }
}

