/*
 * Pipedrive API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateDealProductRequest {
    /// The ID of the product
    #[serde(rename = "product_id", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The price value of the product
    #[serde(rename = "item_price", skip_serializing_if = "Option::is_none")]
    pub item_price: Option<f64>,
    /// The quantity of the product
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    /// The product tax
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    /// The comments of the product
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
    #[serde(rename = "discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f64>,
    /// Whether this product is enabled for the deal  Not possible to disable the product if the deal has installments associated and the product is the last one enabled  Not possible to enable the product if the deal has installments associated and the product is recurring 
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
    #[serde(rename = "tax_method", skip_serializing_if = "Option::is_none")]
    pub tax_method: Option<TaxMethod>,
    /// The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
    #[serde(rename = "discount_type", skip_serializing_if = "Option::is_none")]
    pub discount_type: Option<DiscountType>,
    /// The ID of the product variation
    #[serde(rename = "product_variation_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_variation_id: Option<Option<i32>>,
    /// Only available in Advanced and above plans  How often a customer is billed for access to a service or product  To set `billing_frequency` different than `one-time`, the deal must not have installments associated  A deal can have up to 20 products attached with `billing_frequency` different than `one-time` 
    #[serde(rename = "billing_frequency", skip_serializing_if = "Option::is_none")]
    pub billing_frequency: Option<BillingFrequency>,
    /// Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  When `billing_frequency` is set to `weekly`, this field cannot be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 208 
    #[serde(rename = "billing_frequency_cycles", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_frequency_cycles: Option<Option<i32>>,
    /// Only available in Advanced and above plans  The billing start date. Must be between 10 years in the past and 10 years in the future 
    #[serde(rename = "billing_start_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_start_date: Option<Option<String>>,
}

impl UpdateDealProductRequest {
    pub fn new() -> UpdateDealProductRequest {
        UpdateDealProductRequest {
            product_id: None,
            item_price: None,
            quantity: None,
            tax: None,
            comments: None,
            discount: None,
            is_enabled: None,
            tax_method: None,
            discount_type: None,
            product_variation_id: None,
            billing_frequency: None,
            billing_frequency_cycles: None,
            billing_start_date: None,
        }
    }
}
/// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxMethod {
    #[serde(rename = "exclusive")]
    Exclusive,
    #[serde(rename = "inclusive")]
    Inclusive,
    #[serde(rename = "none")]
    None,
}

impl Default for TaxMethod {
    fn default() -> TaxMethod {
        Self::Exclusive
    }
}
/// The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiscountType {
    #[serde(rename = "percentage")]
    Percentage,
    #[serde(rename = "amount")]
    Amount,
}

impl Default for DiscountType {
    fn default() -> DiscountType {
        Self::Percentage
    }
}
/// Only available in Advanced and above plans  How often a customer is billed for access to a service or product  To set `billing_frequency` different than `one-time`, the deal must not have installments associated  A deal can have up to 20 products attached with `billing_frequency` different than `one-time` 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingFrequency {
    #[serde(rename = "one-time")]
    OneTime,
    #[serde(rename = "annually")]
    Annually,
    #[serde(rename = "semi-annually")]
    SemiAnnually,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "weekly")]
    Weekly,
}

impl Default for BillingFrequency {
    fn default() -> BillingFrequency {
        Self::OneTime
    }
}

