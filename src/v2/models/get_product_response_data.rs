/*
 * Pipedrive API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetProductResponseData {
    /// The ID of the product
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    /// The name of the product
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The product code
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// The unit in which this product is sold
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// The tax percentage
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f64>,
    /// Whether this product will be made marked as deleted or not
    #[serde(rename = "is_deleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// Whether this product can be added to a deal or not
    #[serde(rename = "is_linkable", skip_serializing_if = "Option::is_none")]
    pub is_linkable: Option<bool>,
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<VisibleTo>,
    /// Information about the Pipedrive user who owns the product
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// An object where each key represents a custom field. All custom fields are referenced as randomly generated 40-character hashes
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Only available in Advanced and above plans  How often a customer is billed for access to a service or product 
    #[serde(rename = "billing_frequency", skip_serializing_if = "Option::is_none")]
    pub billing_frequency: Option<BillingFrequency>,
    /// Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  When `billing_frequency` is set to `weekly`, this field cannot be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 208 
    #[serde(rename = "billing_frequency_cycles", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_frequency_cycles: Option<Option<i32>>,
    /// Array of objects, each containing: product_id (number), currency (string), price (number), cost (number), direct_cost (number | null), notes (string)
    #[serde(rename = "prices", skip_serializing_if = "Option::is_none")]
    pub prices: Option<Vec<serde_json::Value>>,
}

impl GetProductResponseData {
    pub fn new() -> GetProductResponseData {
        GetProductResponseData {
            id: None,
            name: None,
            code: None,
            unit: None,
            tax: None,
            is_deleted: None,
            is_linkable: None,
            visible_to: None,
            owner_id: None,
            custom_fields: None,
            billing_frequency: None,
            billing_frequency_cycles: None,
            prices: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VisibleTo {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "7")]
    Variant7,
}

impl Default for VisibleTo {
    fn default() -> VisibleTo {
        Self::Variant1
    }
}
/// Only available in Advanced and above plans  How often a customer is billed for access to a service or product 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingFrequency {
    #[serde(rename = "one-time")]
    OneTime,
    #[serde(rename = "annually")]
    Annually,
    #[serde(rename = "semi-annually")]
    SemiAnnually,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "weekly")]
    Weekly,
}

impl Default for BillingFrequency {
    fn default() -> BillingFrequency {
        Self::OneTime
    }
}

