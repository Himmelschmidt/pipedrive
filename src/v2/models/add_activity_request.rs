/*
 * Pipedrive API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::v2::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddActivityRequest {
    /// The subject of the activity
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The type of the activity
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The ID of the user who owns the activity
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The ID of the deal linked to the activity
    #[serde(rename = "deal_id", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<i32>,
    /// The ID of the lead linked to the activity
    #[serde(rename = "lead_id", skip_serializing_if = "Option::is_none")]
    pub lead_id: Option<String>,
    /// The ID of the person linked to the activity
    #[serde(rename = "person_id", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<i32>,
    /// The ID of the organization linked to the activity
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    /// The ID of the project linked to the activity
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<i32>,
    /// The due date of the activity
    #[serde(rename = "due_date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    /// The due time of the activity
    #[serde(rename = "due_time", skip_serializing_if = "Option::is_none")]
    pub due_time: Option<String>,
    /// The duration of the activity
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Whether the activity marks the assignee as busy or not in their calendar
    #[serde(rename = "busy", skip_serializing_if = "Option::is_none")]
    pub busy: Option<bool>,
    /// Whether the activity is marked as done or not
    #[serde(rename = "done", skip_serializing_if = "Option::is_none")]
    pub done: Option<bool>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<models::ActivityItemLocation>>,
    /// The participants of the activity
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<models::ActivityItemParticipantsInner>>,
    /// The attendees of the activity
    #[serde(rename = "attendees", skip_serializing_if = "Option::is_none")]
    pub attendees: Option<Vec<models::ActivityItemAttendeesInner>>,
    /// The public description of the activity
    #[serde(rename = "public_description", skip_serializing_if = "Option::is_none")]
    pub public_description: Option<String>,
    /// The priority of the activity. Mappable to a specific string using activityFields API.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The note of the activity
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
}

impl AddActivityRequest {
    pub fn new() -> AddActivityRequest {
        AddActivityRequest {
            subject: None,
            r#type: None,
            owner_id: None,
            deal_id: None,
            lead_id: None,
            person_id: None,
            org_id: None,
            project_id: None,
            due_date: None,
            due_time: None,
            duration: None,
            busy: None,
            done: None,
            location: None,
            participants: None,
            attendees: None,
            public_description: None,
            priority: None,
            note: None,
        }
    }
}

